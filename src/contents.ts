
export const robot_py_event: string = "\n# Basic Requirements for robot program\nfrom arpirobot.core.robot import BaseRobot\nfrom arpirobot.core.network import NetworkTable\nfrom arpirobot.core import logger\n\n# Import devices used here (motor controllers, arduino interface, sensors, gamepad, etc)\n\n\nclass Robot(BaseRobot):\n\n    ############################################################################\n    # Constants\n    ############################################################################\n\n    # Put constants here for things like\n    #     Network table keys\n    #     Gamepad mappings (axis and button numbers)\n    #     Sensor pins\n    #     Motor numbers \n    #     Axis deadbands\n\n\n    ############################################################################\n    # Robot creation\n    ############################################################################\n    def __init__(self):\n        super().__init__()\n        # Create the devices used by the robot here, but don't configure them until robot_started\n\n        \n    \n    def robot_started(self):\n        # Configure devices here (do not create devices here. Create them in init)\n        # Configure events here\n        pass\n\n        \n    \n    ############################################################################\n    # Builtin functions\n    ############################################################################\n    def robot_disabled(self):\n        # This function runs once when the robot switches from enabled to disabled\n        pass\n\n    def robot_enabled(self):\n        # This function runs once when the robot switches from disabled to enabled\n        pass\n\n    def periodic(self):\n        # Always do this in periodic or motor controllers will be automatically disabled\n        self.feed_watchdog()\n\n        # Update and read network table values here if necessary\n\n################################################################################\n# Create and start the robot (if this is the script that is being run)\n################################################################################\nif __name__ == \"__main__\":\n    robot = Robot()\n    robot.start()\n";

export const robot_py_periodic: string = "\n# Basic Requirements for robot program\nfrom arpirobot.core.robot import BaseRobot, PeriodicRobot\nfrom arpirobot.core.network import NetworkTable\nfrom arpirobot.core import logger\n\n# Import devices used here (motor controllers, arduino interface, sensors, gamepad, etc)\n\n\nclass Robot(PeriodicRobot):\n\n    ############################################################################\n    # Constants\n    ############################################################################\n\n    # Put constants here for things like\n    #     Network table keys\n    #     Gamepad mappings (axis and button numbers)\n    #     Sensor pins\n    #     Motor numbers \n    #     Axis deadbands\n\n\n    ############################################################################\n    # Robot creation\n    ############################################################################\n    def __init__(self):\n        super().__init__()\n        # Create the devices used by the robot here, but don't configure them until robot_started\n\n        \n    \n    def robot_started(self):\n        # Configure devices here (do not create devices here. Create them in init)\n        pass\n\n        \n    \n    ############################################################################\n    # Builtin functions\n    ############################################################################\n    def robot_disabled(self):\n        # This function runs once when the robot switches from enabled to disabled\n        pass\n\n    def robot_enabled(self):\n        # This function runs once when the robot switches from disabled to enabled\n        pass\n\n    def disabled_periodic(self):\n        # This function runs every 50ms while the robot is disabled.\n        pass\n\n    def enabled_periodic(self):\n        # This function runs every 50ms while the robot is enabled.\n        pass\n\n    def periodic(self):\n        # Always do this in periodic or motor controllers will be automatically disabled\n        self.feed_watchdog()\n\n        # Update and read network table values here if necessary\n\n################################################################################\n# Create and start the robot (if this is the script that is being run)\n################################################################################\nif __name__ == \"__main__\":\n    robot = Robot()\n    robot.start()\n";